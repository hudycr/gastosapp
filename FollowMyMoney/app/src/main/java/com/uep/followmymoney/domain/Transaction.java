package com.uep.followmymoney.domain;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.uep.followmymoney.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.uep.followmymoney.dao.CuentaDao;
import com.uep.followmymoney.dao.TransactionDao;
import com.uep.followmymoney.dao.TransactionOutputDao;
import com.uep.followmymoney.utils.StringUtil;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "TRANSACTION".
 */
@Entity(active = true)
public class Transaction {

    @Id
    private Long id;
    private float value;
    private String signature;
    private long timeStamp;

    @Convert(converter = com.uep.followmymoney.domain.TipoOperacionConverter.class, columnType = Integer.class)
    private TipoOperacion tipo;
    private long blockId;
    private long cuentaSenderId;
    private long cuentaReciepientId;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 947191939)
    private transient TransactionDao myDao;
    @ToOne(joinProperty = "cuentaSenderId")
    private Cuenta sender;

    @Generated(hash = 880682693)
    private transient Long sender__resolvedKey;
    @ToOne(joinProperty = "cuentaReciepientId")
    private Cuenta reciepient;

    @Generated(hash = 659750442)
    private transient Long reciepient__resolvedKey;
    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "parentTransactionId")
    })
    private List<TransactionOutput> outputs;

    @Generated(hash = 750986268)
    public Transaction() {
    }

    public Transaction(Long id) {
        this.id = id;
    }

    @Generated(hash = 813074078)
    public Transaction(Long id, float value, String signature, long timeStamp, TipoOperacion tipo, long blockId, long cuentaSenderId, long cuentaReciepientId) {
        this.id = id;
        this.value = value;
        this.signature = signature;
        this.timeStamp = timeStamp;
        this.tipo = tipo;
        this.blockId = blockId;
        this.cuentaSenderId = cuentaSenderId;
        this.cuentaReciepientId = cuentaReciepientId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 511087935)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTransactionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public float getValue() {
        return value;
    }

    public void setValue(float value) {
        this.value = value;
    }

    public String getSignature() {
        return signature;
    }

    public void setSignature(String signature) {
        this.signature = signature;
    }

    public long getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(long timeStamp) {
        this.timeStamp = timeStamp;
    }

    public TipoOperacion getTipo() {
        return tipo;
    }

    public void setTipo(TipoOperacion tipo) {
        this.tipo = tipo;
    }

    public long getBlockId() {
        return blockId;
    }

    public void setBlockId(long blockId) {
        this.blockId = blockId;
    }

    public long getCuentaSenderId() {
        return cuentaSenderId;
    }

    public void setCuentaSenderId(long cuentaSenderId) {
        this.cuentaSenderId = cuentaSenderId;
    }

    public long getCuentaReciepientId() {
        return cuentaReciepientId;
    }

    public void setCuentaReciepientId(long cuentaReciepientId) {
        this.cuentaReciepientId = cuentaReciepientId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 165849708)
    public Cuenta getSender() {
        long __key = this.cuentaSenderId;
        if (sender__resolvedKey == null || !sender__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CuentaDao targetDao = daoSession.getCuentaDao();
            Cuenta senderNew = targetDao.load(__key);
            synchronized (this) {
                sender = senderNew;
                sender__resolvedKey = __key;
            }
        }
        return sender;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 477635471)
    public void setSender(@NotNull Cuenta sender) {
        if (sender == null) {
            throw new DaoException("To-one property 'cuentaSenderId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.sender = sender;
            cuentaSenderId = sender.getId();
            sender__resolvedKey = cuentaSenderId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1433836704)
    public Cuenta getReciepient() {
        long __key = this.cuentaReciepientId;
        if (reciepient__resolvedKey == null || !reciepient__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CuentaDao targetDao = daoSession.getCuentaDao();
            Cuenta reciepientNew = targetDao.load(__key);
            synchronized (this) {
                reciepient = reciepientNew;
                reciepient__resolvedKey = __key;
            }
        }
        return reciepient;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 681613540)
    public void setReciepient(@NotNull Cuenta reciepient) {
        if (reciepient == null) {
            throw new DaoException("To-one property 'cuentaReciepientId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.reciepient = reciepient;
            cuentaReciepientId = reciepient.getId();
            reciepient__resolvedKey = cuentaReciepientId;
        }
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 81129419)
    public List<TransactionOutput> getOutputs() {
        if (outputs == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransactionOutputDao targetDao = daoSession.getTransactionOutputDao();
            List<TransactionOutput> outputsNew = targetDao._queryTransaction_Outputs(id);
            synchronized (this) {
                if (outputs == null) {
                    outputs = outputsNew;
                }
            }
        }
        return outputs;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 1925425011)
    public synchronized void resetOutputs() {
        outputs = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    public void calulateHash() {
        this.signature = StringUtil.applySha256(cuentaSenderId +
                cuentaReciepientId +
                Float.toString(value) + blockId
        );

    }
}
